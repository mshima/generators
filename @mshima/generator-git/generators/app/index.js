const EOL = require('os').EOL;
const PACKAGE_NAME = require('../../package.json').name;

const DEFAULTS = {
  NODE: ['# node.js', 'node_modules']
};

const DETECT = {
  '.project': [
    `# Eclipse (detected by ${PACKAGE_NAME})`,
    '.project',
    '.settings'
  ]
};

function createGenerator(env) {
  return class GitAppGenerator extends require('@mshima/generator') {
    constructor(args, options) {
      super(args, options);
      this.checkEnvironmentVersion('2.10.2');

      this.sections = [DEFAULTS.NODE];
      this.ignores = [];
      this.gitIgnoreFile = this.destinationPath('.gitignore');
    }

    get initializing() {
      return {
        composeContext() {
          if (this.compose) {
            return;
          }

          if (this.env._rootGenerator && this.env._rootGenerator !== this) {
            throw new Error(`Generator ${this.options.namespace} requires experimental composing enabled`);
          }

          this.compose = this.env.createCompose(this.destinationRoot());
        }
      };
    }

    get prompting() {
      return {};
    }

    get configuring() {
      return {
        loadExisting() {
          let file;
          if (this.fs.exists(this.gitIgnoreFile)) {
            file = this.fs.read(this.gitIgnoreFile).trim();
            this.ignores = this.ignores.concat(file.split(EOL));
          }
        },
        detect() {
          Object.keys(DETECT).forEach(file => {
            if (this.existsDestination(file)) {
              this.sections.push(DETECT[file]);
            }
          });
        }
      };
    }

    get default() {
      return {};
    }

    get writing() {
      return {
        gitignore() {
          const generatedText = `# Generated by ${PACKAGE_NAME}`;
          this.fs.write(this.gitIgnoreFile, generatedText);
          const writtenLines = [generatedText];

          let lastLine;
          const writeLine = line => {
            line = line.trim();
            if (lastLine === line) {
              return;
            }

            if (writtenLines.includes(line)) {
              return;
            }

            lastLine = line;
            this.fs.append(this.gitIgnoreFile, line, {trimEnd: false});
            if (line !== '') {
              writtenLines.push(line);
            }
          };

          this.sections.forEach(section => {
            section.forEach(line => writeLine(line));
            writeLine('');
          });

          if (this.ignores.filter(line => line && line !== '' && !writtenLines.includes(line)).length > 0) {
            writeLine('# Others entries');
          }

          // Next line should not be blank
          lastLine = '';
          this.ignores.forEach(line => writeLine(line));
          this.fs.append(this.gitIgnoreFile, '');
        }
      };
    }

    get install() {
      return {};
    }

    get end() {
      return {};
    }

    '#ignore'(...args) {
      this.sections.push(args);
    }
  };
}

module.exports = {
  createGenerator
};
